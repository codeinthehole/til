<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learnt...</title>
    <link>https://til.codeinthehole.com/</link>
    <description>Recent content on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Aug 2020 11:53:31 +0100</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>About `:help macvim`</title>
      <link>https://til.codeinthehole.com/posts/about-help-macvim/</link>
      <pubDate>Mon, 17 Aug 2020 11:53:31 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-help-macvim/</guid>
      <description>MacVim ships with its own help files, accessed via:
:help macvimThese provide lots of useful info on things like:
 The differences between MacVim and other Vim variants MacVim-specific preferences The macvim color scheme  and much more.</description>
    </item>
    
    
    
    <item>
      <title>About Vim&#39;s `:diffthis` command</title>
      <link>https://til.codeinthehole.com/posts/about-vims-diffthis-command/</link>
      <pubDate>Mon, 17 Aug 2020 09:28:52 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-vims-diffthis-command/</guid>
      <description>You can manually compare two more open buffers by running:
:windo diffthisThis is an alternative to opening the files with vimdiff. One advantage is that you compare buffers that aren&amp;rsquo;t files (eg text pasted from the clipboard).
Further reading:
 There&amp;rsquo;s some useful info in the &amp;ldquo;Comparing buffers with vimdiff&amp;rdquo; screencast. :help :diffthis  </description>
    </item>
    
    
    
    <item>
      <title>About the stationery pad feature in Finder</title>
      <link>https://til.codeinthehole.com/posts/about-the-stationery-pad-feature-in-finder/</link>
      <pubDate>Fri, 14 Aug 2020 10:30:00 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-the-stationery-pad-feature-in-finder/</guid>
      <description>If you use Finder to mark a file as a &amp;ldquo;stationery pad&amp;rdquo; then apps will open a copy of the file. The original file will effectively act as a template.
You can set this flag from the Get Info Finder dialogue:
  This only works when opening a file from Finder, so not that much use to people who live in iTerm (like me).</description>
    </item>
    
    
    
    <item>
      <title>About `pngcrush`</title>
      <link>https://til.codeinthehole.com/posts/about-pngcrush/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-pngcrush/</guid>
      <description>It&amp;rsquo;s an image optimizer for PNG files. It&amp;rsquo;s available via Homebrew for MacOS and works like:
$ pngcrush -ow screenshot.png where -ow means the original image file will be overwritten.
I&amp;rsquo;ve integrated it into the til_screenshot.sh helper script used by this repo.</description>
    </item>
    
    
    
    <item>
      <title>Asana has some magic search terms</title>
      <link>https://til.codeinthehole.com/posts/asana-has-some-magic-search-terms/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/asana-has-some-magic-search-terms/</guid>
      <description>If you use the &amp;ldquo;Search this project&amp;rdquo; widget (via the &amp;ldquo;&amp;hellip;&amp;rdquo; link on the right-hand side of the project view), you can search for:
 &amp;quot;nobody&amp;quot; to see unassigned tickets &amp;quot;not me&amp;quot; to see tickets assigned to anyone but you    Found via https://forum.asana.com/t/search-for-unassigned-tasks/4770
Quite basic functionality really but I almost gave up trying to find it.</description>
    </item>
    
    
    
    <item>
      <title>You can have SASS asset pipelines in Hugo</title>
      <link>https://til.codeinthehole.com/posts/you-can-have-sass-asset-pipelines-in-hugo/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-have-sass-asset-pipelines-in-hugo/</guid>
      <description>Which lets you build a CSS stylesheet via something like:
{{ $style := resources.Get &amp;#34;css/main.scss&amp;#34; | resources.ToCSS }} &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{{ $style.Permalink }}&amp;#34;&amp;gt; This is rather nice as you get the usual live reloading functionality when using hugo server. In previous Hugo projects, I had a separate process for rebuilding CSS, which can now be factored away.
This feature is part of Hugo&amp;rsquo;s asset pipeline functionality and has been available since v0.</description>
    </item>
    
    
    
    <item>
      <title>About text fragments</title>
      <link>https://til.codeinthehole.com/posts/about-text-fragments/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-text-fragments/</guid>
      <description>Modern versions of Chrome and Edge support Text Fragments, which let you specify a text snippet in the URL fragment that the browser can highlight (or bring to the user&amp;rsquo;s attention in another way).
For example, opening https://wicg.github.io/scroll-to-text-fragment/#abstract:~:text=user%20agent%20can%20quickly%20emphasise in Chrome will open the page with &amp;ldquo;user agent can quickly emphasise&amp;rdquo; highlighted:
  Note the :~:text=$query in the URL.
There&amp;rsquo;s a Google-authored Chrome plugin that eases the process of building one of these URLs.</description>
    </item>
    
    
    
    <item>
      <title>Renaming a Terraform module is dangerous</title>
      <link>https://til.codeinthehole.com/posts/renaming-a-terraform-module-leads-to-resource-recreation/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/renaming-a-terraform-module-leads-to-resource-recreation/</guid>
      <description>As the state file uses the module name in identifiers and so a module rename causes Terraform to think all existing resources need to be destroyed and recreated.
You can avoid such needless destruction by editing the state file manually to correct the identifiers.
It might be possible to use terraform mv although I didn&amp;rsquo;t use that approach today.</description>
    </item>
    
    
    
    <item>
      <title>Where authentication for the `ubuntu` user on a EC2 instance is defined</title>
      <link>https://til.codeinthehole.com/posts/about-passwordless-users-in-ec2/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-passwordless-users-in-ec2/</guid>
      <description>The file that controls where the default ubuntu user on an Ubuntu EC2 instance is /etc/sudoers.d/90-cloud-init-users which has contents:
# User rules for ubuntu ubuntu ALL=(ALL) NOPASSWD:ALL def f(a: int) -&amp;gt; int: return None As you can see, the default ubuntu user has password-less, sudo access.
Source https://serverfault.com/questions/615034/disable-nopasswd-sudo-access-for-ubuntu-user-on-an-ec2-instance</description>
    </item>
    
    
    
    <item>
      <title>About the phrase &#34;Parking downhill&#34;</title>
      <link>https://til.codeinthehole.com/posts/park-downhill/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/park-downhill/</guid>
      <description>From https://news.ycombinator.com/item?id=23118940
 Before putting a project or incomplete task away, make notes of what the next thing was that you were going to work on. This lets you bypass that 10 minute orientation getting back into the project the next time you pick it up.
 This is something I&amp;rsquo;ve done for a while.
There&amp;rsquo;s various other ways of doing the same thing, such as:
 Leaving a failing test Leaving an incomplete sentence  In my Trello cards, I like to regularly add comments saying:</description>
    </item>
    
    
    
    <item>
      <title>About Alfred&#39;s clipboard history feature</title>
      <link>https://til.codeinthehole.com/posts/alfred-clipboard-history/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/alfred-clipboard-history/</guid>
      <description>Alfred has a clipboard history feature which lets you easily pluck out previous values from your system clipboard.
It&amp;rsquo;s disabled by default.</description>
    </item>
    
    
    
    <item>
      <title>About Alfred&#39;s snippet collections</title>
      <link>https://til.codeinthehole.com/posts/alfred-snippet-collections/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/alfred-snippet-collections/</guid>
      <description>You can create &amp;ldquo;collections&amp;rdquo; of snippets in Alfred, such as:
 Common comments used in code review. Calendly URLs Personal Zoom link  Anything that you might want to insert into text regularly.
  See https://www.alfredapp.com/help/features/snippets/</description>
    </item>
    
    
    
    <item>
      <title>About Quitter</title>
      <link>https://til.codeinthehole.com/posts/quitter/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/quitter/</guid>
      <description>There&amp;rsquo;s a MacOS app called Quitter which will automatically quit applications after some period of inactivity.
  </description>
    </item>
    
    
    
    <item>
      <title>About the MacOS `screencapture` utility</title>
      <link>https://til.codeinthehole.com/posts/about-the-screencapture-bsd-util/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-the-screencapture-bsd-util/</guid>
      <description>It&amp;rsquo;s what MacOS uses for its shortcuts but can be called from the command-line:
$ screencapture It has lots of interesting options &amp;ndash; see man screencapture.</description>
    </item>
    
    
  </channel>
</rss>
