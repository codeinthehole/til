<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command-line tools - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/command-line-tools/</link>
    <description>Recent content in Command-line tools on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Sep 2020 12:47:23 +0100</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/command-line-tools/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>How to use `xargs` with `printf`</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-xargs-with-printf/</link>
      <pubDate>Tue, 29 Sep 2020 12:47:23 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-xargs-with-printf/</guid>
      <description>This is obvious in retrospect but it hadn&amp;rsquo;t dawned on me that you can use xargs printf to use STDIN as printf arguments. Trivial example:
$ echo world | xargs printf &amp;#34;hello %s&amp;#34; hello world It&amp;rsquo;s useful for building strings from streams of data. Today&amp;rsquo;s usecase was building a pastable Python snippet from a JSON file containing object IDs:
$ cat loggly_events.json | jq &amp;#39;.events[].event.json.object_id&amp;#39; \  | paste -sd, | xargs printf &amp;#34;object_ids = [%s]&amp;#34; object_ids = [4,6,8,2,3,4] Here jq is used to extract a newline-separated stream of IDs which are joined into a CSV-string using paste before being formatted into a Python snippet with printf.</description>
    </item>
    
    <item>
      <title>About `pngcrush`</title>
      <link>https://til.codeinthehole.com/posts/about-pngcrush/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-pngcrush/</guid>
      <description>It&amp;rsquo;s an image optimizer for PNG files. It&amp;rsquo;s available via Homebrew for MacOS and works like:
$ pngcrush -ow screenshot.png where -ow means the original image file will be overwritten.
I&amp;rsquo;ve integrated it into the til_screenshot.sh helper script used by this repo.</description>
    </item>
    

  </channel>
</rss>
