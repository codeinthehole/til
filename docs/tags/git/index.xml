<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/git/</link>
    <description>Recent content in Git on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Feb 2023 14:49:51 +0000</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>How to perform a non-interactive, interactive Git rebase</title>
      <link>https://til.codeinthehole.com/posts/how-to-perform-a-noninteractive-interactive-git-rebase/</link>
      <pubDate>Wed, 15 Feb 2023 14:49:51 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-perform-a-noninteractive-interactive-git-rebase/</guid>
      <description>If you create a load of fix-up commits using:</description>
    </item>
    
    <item>
      <title>How to show the history of a file with `git log --patch`</title>
      <link>https://til.codeinthehole.com/posts/how-to-show-the-history-of-a-file-with-git-log-patch/</link>
      <pubDate>Wed, 11 Jan 2023 15:41:02 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-show-the-history-of-a-file-with-git-log-patch/</guid>
      <description>Am slightly embarrassed to admit it but I&amp;rsquo;ve only just discovered the --patch option to git log which shows diff information for each commit.</description>
    </item>
    
    <item>
      <title>How to continue a Git rebase and skip editing the commit message</title>
      <link>https://til.codeinthehole.com/posts/how-to-continue-a-git-rebase-and-skip-editing-the-commit-message/</link>
      <pubDate>Fri, 12 Nov 2021 11:37:54 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-continue-a-git-rebase-and-skip-editing-the-commit-message/</guid>
      <description>During an interactive rebase, when you&amp;rsquo;ve fixed the conflicts or finished editing the commit you can run:</description>
    </item>
    
    <item>
      <title>How to find the files from a commit that deleted a given pattern</title>
      <link>https://til.codeinthehole.com/posts/how-to-print-the-changed-filepaths-from-a-commit-and-nothing-else/</link>
      <pubDate>Fri, 15 Oct 2021 16:54:35 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-print-the-changed-filepaths-from-a-commit-and-nothing-else/</guid>
      <description>The --name-only option for git log restricts the output to the changed file paths but not their full diffs.</description>
    </item>
    
    <item>
      <title>About Git&#39;s `diff.relative` config option</title>
      <link>https://til.codeinthehole.com/posts/about-gits-diffrelative-config-option/</link>
      <pubDate>Tue, 12 Oct 2021 14:37:13 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-gits-diffrelative-config-option/</guid>
      <description>Setting this option to true in ~/.gitconfig ensures diff commands show paths relative to the current directory:</description>
    </item>
    
    <item>
      <title>About `git merge-base`</title>
      <link>https://til.codeinthehole.com/posts/about-git-mergebase/</link>
      <pubDate>Wed, 08 Sep 2021 09:29:15 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-git-mergebase/</guid>
      <description>Git&amp;rsquo;s merge-base command can be used to find the common ancestor for two commits (or branches/references).</description>
    </item>
    
    <item>
      <title>Git aliases that run an external command are run from the repository root</title>
      <link>https://til.codeinthehole.com/posts/that-git-aliases-that-run-an-external-command-are-run-from-the-repository-root/</link>
      <pubDate>Wed, 21 Jul 2021 12:50:48 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-git-aliases-that-run-an-external-command-are-run-from-the-repository-root/</guid>
      <description>Verify this by creating an alias in ~/.gitconfig like so:</description>
    </item>
    
    <item>
      <title>About `git log -G`</title>
      <link>https://til.codeinthehole.com/posts/about-git-log-g/</link>
      <pubDate>Wed, 02 Jun 2021 13:00:25 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-git-log-g/</guid>
      <description>git log supports two options for searching the contents of each commit&amp;rsquo;s patch:</description>
    </item>
    
    <item>
      <title>That `vim-polyglot` conflicts with Hub when creating pull requests</title>
      <link>https://til.codeinthehole.com/posts/that-vimpolyglot-conflicts-with-hub-when-creating-pull-requests/</link>
      <pubDate>Tue, 30 Mar 2021 16:46:39 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-vimpolyglot-conflicts-with-hub-when-creating-pull-requests/</guid>
      <description>Hub, the Github CLI tool, allows a pull request to be created from the command line.</description>
    </item>
    
    <item>
      <title>About `git-absorb`</title>
      <link>https://til.codeinthehole.com/posts/about-gitabsorb/</link>
      <pubDate>Sun, 28 Mar 2021 11:28:17 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-gitabsorb/</guid>
      <description>git-absorb is a great tool for crafting atomic commits.</description>
    </item>
    
    <item>
      <title>How to include the date in `git reflog` output</title>
      <link>https://til.codeinthehole.com/posts/how-to-include-the-date-in-git-reflog-output/</link>
      <pubDate>Thu, 25 Mar 2021 17:11:34 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-include-the-date-in-git-reflog-output/</guid>
      <description>By default, the output of git reflog doesn&amp;rsquo;t include the date when the reference was updated.</description>
    </item>
    
    <item>
      <title>About delta, a viewer for Git and diff output</title>
      <link>https://til.codeinthehole.com/posts/about-delta/</link>
      <pubDate>Fri, 19 Mar 2021 09:42:34 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-delta/</guid>
      <description>delta provides much improved diff views in the terminal.</description>
    </item>
    
    <item>
      <title>You can use Git log to view the evolution of a function</title>
      <link>https://til.codeinthehole.com/posts/you-can-use-git-log-to-view-the-evolution-of-a-function/</link>
      <pubDate>Fri, 05 Mar 2021 22:49:17 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-use-git-log-to-view-the-evolution-of-a-function/</guid>
      <description>Modern versions of git log provide a -L option which lets you trace the evolution of a line range or function:</description>
    </item>
    
    <item>
      <title>How to resolve Git rebase conflicts on renamed files</title>
      <link>https://til.codeinthehole.com/posts/how-to-resolve-git-conflicts-on-renamed-files/</link>
      <pubDate>Mon, 05 Oct 2020 11:34:01 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-resolve-git-conflicts-on-renamed-files/</guid>
      <description>If there&amp;rsquo;s been a large-scale renaming of files in master and you attempt to rebase your pull-request branch, the resulting conflicts can be tricky to resolve.</description>
    </item>
    
    <item>
      <title>How to count lines of code in a Git repo for a given commit</title>
      <link>https://til.codeinthehole.com/posts/how-to-count-lines-of-code-in-a-git-repo/</link>
      <pubDate>Thu, 17 Sep 2020 15:54:21 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-count-lines-of-code-in-a-git-repo/</guid>
      <description>For a given commit $SHA, use:
git diff --shortstat `git hash-object -t tree /dev/null`.</description>
    </item>
    

  </channel>
</rss>
