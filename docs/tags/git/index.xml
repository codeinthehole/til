<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Git - Today I Learnt — David Winterbottom</title>
    <link>https://til.codeinthehole.com/tags/git/</link>
    <description>Git TILs - David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Jul 2025 21:35:07 +0100</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>About Git&#39;s `range-diff` command</title>
      <link>https://til.codeinthehole.com/posts/about-gits-rangediff-command/</link>
      <pubDate>Sun, 06 Jul 2025 21:35:07 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-gits-rangediff-command/</guid>
      <description>How to compare two ranges of commits.</description>
    </item>
    
    <item>
      <title>How to run pre-commit using an interactive rebase</title>
      <link>https://til.codeinthehole.com/posts/how-to-run-precommit-using-an-interactive-rebase/</link>
      <pubDate>Fri, 09 May 2025 21:49:28 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-run-precommit-using-an-interactive-rebase/</guid>
      <description>Using git rebase to run shell commands on each commit</description>
    </item>
    
    <item>
      <title>How to add commit sizes to `git log` output</title>
      <link>https://til.codeinthehole.com/posts/how-to-add-commit-sizes-to-git-log-output/</link>
      <pubDate>Mon, 05 Aug 2024 18:42:43 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-add-commit-sizes-to-git-log-output/</guid>
      <description>It&amp;rsquo;s sometimes useful to see the sizes of each Git commit — &amp;ldquo;size&amp;rdquo; as in the number of line additions and deletions.
</description>
    </item>
    
    <item>
      <title>How to measure codeowner coverage within a large repo</title>
      <link>https://til.codeinthehole.com/posts/how-to-measure-codeowner-coverage-within-a-large-repo/</link>
      <pubDate>Mon, 24 Jun 2024 11:45:01 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-measure-codeowner-coverage-within-a-large-repo/</guid>
      <description>In a large monorepo, it&amp;rsquo;s helpful to have a .github/CODEOWNERS file that maps filepaths to owning teams, covering as much of the codebase as possible.
</description>
    </item>
    
    <item>
      <title>How to set the default branch for a Git remote</title>
      <link>https://til.codeinthehole.com/posts/how-to-set-the-default-branch-for-a-git-remote/</link>
      <pubDate>Fri, 10 May 2024 21:59:31 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-set-the-default-branch-for-a-git-remote/</guid>
      <description>Just putting this here as I always forget.
</description>
    </item>
    
    <item>
      <title>How to edit and search the files in one commit</title>
      <link>https://til.codeinthehole.com/posts/how-to-edit-and-search-the-files-in-one-commit/</link>
      <pubDate>Wed, 27 Mar 2024 14:56:20 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-edit-and-search-the-files-in-one-commit/</guid>
      <description>When interactive rebasing, it&amp;rsquo;s useful to be able to edit all the files in one particular commit. Here&amp;rsquo;s how you can do that.
</description>
    </item>
    
    <item>
      <title>How to avoid committing Jupyter Notebook output to Git</title>
      <link>https://til.codeinthehole.com/posts/how-to-avoid-committing-jupyter-notebook-output-to-git/</link>
      <pubDate>Fri, 09 Jun 2023 16:06:55 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-avoid-committing-jupyter-notebook-output-to-git/</guid>
      <description>When working with Jupyter Notebooks, the output of each cell does not need to be committed as:
</description>
    </item>
    
    <item>
      <title>That `git for-each-ref` support conditional logic in its format</title>
      <link>https://til.codeinthehole.com/posts/that-git-foreachref-support-conditional-logic-in-its-format/</link>
      <pubDate>Fri, 28 Apr 2023 20:11:32 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-git-foreachref-support-conditional-logic-in-its-format/</guid>
      <description>Git&amp;rsquo;s for-each-ref command allows you to iterate over refs and print them according to the --format option.
</description>
    </item>
    
    <item>
      <title>How to perform a non-interactive, interactive Git rebase</title>
      <link>https://til.codeinthehole.com/posts/how-to-perform-a-noninteractive-interactive-git-rebase/</link>
      <pubDate>Wed, 15 Feb 2023 14:49:51 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-perform-a-noninteractive-interactive-git-rebase/</guid>
      <description>If you create a load of fix-up commits using:
</description>
    </item>
    
    <item>
      <title>How to show the history of a file with `git log --patch`</title>
      <link>https://til.codeinthehole.com/posts/how-to-show-the-history-of-a-file-with-git-log-patch/</link>
      <pubDate>Wed, 11 Jan 2023 15:41:02 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-show-the-history-of-a-file-with-git-log-patch/</guid>
      <description>Am slightly embarrassed to admit it but I&amp;rsquo;ve only just discovered the --patch option to git log which shows diff information for each commit.
</description>
    </item>
    
    <item>
      <title>How to continue a Git rebase and skip editing the commit message</title>
      <link>https://til.codeinthehole.com/posts/how-to-continue-a-git-rebase-and-skip-editing-the-commit-message/</link>
      <pubDate>Fri, 12 Nov 2021 11:37:54 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-continue-a-git-rebase-and-skip-editing-the-commit-message/</guid>
      <description>During an interactive rebase, when you&amp;rsquo;ve fixed the conflicts or finished editing the commit you can run:
</description>
    </item>
    
    <item>
      <title>How to find the files from a commit that deleted a given pattern</title>
      <link>https://til.codeinthehole.com/posts/how-to-print-the-changed-filepaths-from-a-commit-and-nothing-else/</link>
      <pubDate>Fri, 15 Oct 2021 16:54:35 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-print-the-changed-filepaths-from-a-commit-and-nothing-else/</guid>
      <description>The --name-only option for git log restricts the output to the changed file paths but not their full diffs. However, by default, the output still includes the commit subject and description which means the output can&amp;rsquo;t be piped into commands that expect a list of file paths.
</description>
    </item>
    
    <item>
      <title>About Git&#39;s `diff.relative` config option</title>
      <link>https://til.codeinthehole.com/posts/about-gits-diffrelative-config-option/</link>
      <pubDate>Tue, 12 Oct 2021 14:37:13 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-gits-diffrelative-config-option/</guid>
      <description>Setting this option to true in ~/.gitconfig ensures diff commands show paths relative to the current directory:
</description>
    </item>
    
    <item>
      <title>About `git merge-base`</title>
      <link>https://til.codeinthehole.com/posts/about-git-mergebase/</link>
      <pubDate>Wed, 08 Sep 2021 09:29:15 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-git-mergebase/</guid>
      <description>Git&amp;rsquo;s merge-base command can be used to find the common ancestor for two commits (or branches/references). From the docs:
</description>
    </item>
    
    <item>
      <title>Git aliases that run an external command are run from the repository root</title>
      <link>https://til.codeinthehole.com/posts/that-git-aliases-that-run-an-external-command-are-run-from-the-repository-root/</link>
      <pubDate>Wed, 21 Jul 2021 12:50:48 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-git-aliases-that-run-an-external-command-are-run-from-the-repository-root/</guid>
      <description>Verify this by creating an alias in ~/.gitconfig like so:
</description>
    </item>
    
    <item>
      <title>About `git log -G`</title>
      <link>https://til.codeinthehole.com/posts/about-git-log-g/</link>
      <pubDate>Wed, 02 Jun 2021 13:00:25 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-git-log-g/</guid>
      <description>git log supports two options for searching the contents of each commit&amp;rsquo;s patch:
</description>
    </item>
    
    <item>
      <title>That `vim-polyglot` conflicts with Hub when creating pull requests</title>
      <link>https://til.codeinthehole.com/posts/that-vimpolyglot-conflicts-with-hub-when-creating-pull-requests/</link>
      <pubDate>Tue, 30 Mar 2021 16:46:39 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-vimpolyglot-conflicts-with-hub-when-creating-pull-requests/</guid>
      <description>Hub, the Github CLI tool, allows a pull request to be created from the command line. It does this by opening Vim like so:
</description>
    </item>
    
    <item>
      <title>About `git-absorb`</title>
      <link>https://til.codeinthehole.com/posts/about-gitabsorb/</link>
      <pubDate>Sun, 28 Mar 2021 11:28:17 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-gitabsorb/</guid>
      <description>git-absorb is a great tool for crafting atomic commits. Given some uncommitted changes, it automates the process of identifying which commit to squash each change into. The workflow is simply:
</description>
    </item>
    
    <item>
      <title>How to include the date in `git reflog` output</title>
      <link>https://til.codeinthehole.com/posts/how-to-include-the-date-in-git-reflog-output/</link>
      <pubDate>Thu, 25 Mar 2021 17:11:34 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-include-the-date-in-git-reflog-output/</guid>
      <description>By default, the output of git reflog doesn&amp;rsquo;t include the date when the reference was updated. But git reflog [show] is an alias of git log --walk-reflogs --oneline and so accepts any of the options of git log. This means the date can be included by using the --format option.
</description>
    </item>
    
    <item>
      <title>About delta, a viewer for Git and diff output</title>
      <link>https://til.codeinthehole.com/posts/about-delta/</link>
      <pubDate>Fri, 19 Mar 2021 09:42:34 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-delta/</guid>
      <description>delta provides much improved diff views in the terminal. It provides things like:
</description>
    </item>
    
    <item>
      <title>You can use Git log to view the evolution of a function</title>
      <link>https://til.codeinthehole.com/posts/you-can-use-git-log-to-view-the-evolution-of-a-function/</link>
      <pubDate>Fri, 05 Mar 2021 22:49:17 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-use-git-log-to-view-the-evolution-of-a-function/</guid>
      <description>Modern versions of git log provide a -L option which lets you trace the evolution of a line range or function:
</description>
    </item>
    
    <item>
      <title>How to resolve Git rebase conflicts on renamed files</title>
      <link>https://til.codeinthehole.com/posts/how-to-resolve-git-conflicts-on-renamed-files/</link>
      <pubDate>Mon, 05 Oct 2020 11:34:01 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-resolve-git-conflicts-on-renamed-files/</guid>
      <description>If there&amp;rsquo;s been a large-scale renaming of files in master and you attempt to rebase your pull-request branch, the resulting conflicts can be tricky to resolve. You&amp;rsquo;ll see lots of conflicts of form:
</description>
    </item>
    
    <item>
      <title>How to count lines of code in a Git repo for a given commit</title>
      <link>https://til.codeinthehole.com/posts/how-to-count-lines-of-code-in-a-git-repo/</link>
      <pubDate>Thu, 17 Sep 2020 15:54:21 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-count-lines-of-code-in-a-git-repo/</guid>
      <description>For a given commit $SHA, use:
git diff --shortstat `git hash-object -t tree /dev/null`..$SHA which works as git hash-object -t tree /dev/null computes the hash of the empty tree.
</description>
    </item>
    

  </channel>
</rss>
