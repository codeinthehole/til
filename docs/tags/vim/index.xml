<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/vim/</link>
    <description>Recent content in Vim on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Feb 2023 21:13:57 +0000</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>About the `typos` source code spell checker</title>
      <link>https://til.codeinthehole.com/posts/about-the-typos-source-code-spell-checker/</link>
      <pubDate>Wed, 22 Feb 2023 21:13:57 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-the-typos-source-code-spell-checker/</guid>
      <description>typos is a source code spell checker written Rust that&amp;rsquo;s useful for finding typos in code comments and variable names.</description>
    </item>
    
    <item>
      <title>How to write Vimscript functions that operate on a visually selected area</title>
      <link>https://til.codeinthehole.com/posts/how-to-write-vimscript-functions-that-operate-on-a-visually-selected-area/</link>
      <pubDate>Sat, 28 Jan 2023 11:57:30 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-write-vimscript-functions-that-operate-on-a-visually-selected-area/</guid>
      <description>I was trying to write a Vim function that would act on a visual selection but found it surprisingly difficult.</description>
    </item>
    
    <item>
      <title>How to show the history of a file with `git log --patch`</title>
      <link>https://til.codeinthehole.com/posts/how-to-show-the-history-of-a-file-with-git-log-patch/</link>
      <pubDate>Wed, 11 Jan 2023 15:41:02 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-show-the-history-of-a-file-with-git-log-patch/</guid>
      <description>Am slightly embarrassed to admit it but I&amp;rsquo;ve only just discovered the --patch option to git log which shows diff information for each commit.</description>
    </item>
    
    <item>
      <title>How to automatically disable Github Copilot in Vim when editing large files</title>
      <link>https://til.codeinthehole.com/posts/how-to-automatically-disable-github-copilot-in-vim-when-editing-large-files/</link>
      <pubDate>Fri, 06 Jan 2023 09:21:18 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-automatically-disable-github-copilot-in-vim-when-editing-large-files/</guid>
      <description>Since installing vim-copilot, editing large files had become noticeably slow.</description>
    </item>
    
    <item>
      <title>That `hub` clashes with `vim-polyglot`</title>
      <link>https://til.codeinthehole.com/posts/that-hub-clashes-with-vimpolyglot/</link>
      <pubDate>Fri, 16 Dec 2022 21:17:06 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-hub-clashes-with-vimpolyglot/</guid>
      <description>I use Github&amp;rsquo;s hub library to create pull requests with a command similar to:</description>
    </item>
    
    <item>
      <title>How to use STDIN to populate Vim&#39;s quickfix list</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-stdin-to-populate-vims-quickfix-list/</link>
      <pubDate>Wed, 05 Oct 2022 15:11:57 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-stdin-to-populate-vims-quickfix-list/</guid>
      <description>Vim can be opened in quickfix mode by specifying an error file with the -q option:</description>
    </item>
    
    <item>
      <title>How to get Vale to work with Vim&#39;s Ale plugin</title>
      <link>https://til.codeinthehole.com/posts/how-to-get-vale-to-work-with-vims-ale-plugin/</link>
      <pubDate>Sun, 20 Feb 2022 18:54:33 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-get-vale-to-work-with-vims-ale-plugin/</guid>
      <description>Vale is an extensible syntax aware linter. It can integrate with Vim via Ale although there&amp;rsquo;s a gotcha to be aware of.</description>
    </item>
    
    <item>
      <title>How to use `markdownlint` output in Vim&#39;s quickfix list</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-markdownlint-output-in-vims-quickfix-list/</link>
      <pubDate>Wed, 16 Feb 2022 13:05:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-markdownlint-output-in-vims-quickfix-list/</guid>
      <description>The output from markdownlint-cli has this form:
path/to/file.md:13:81 MD013/line-length Line length [Expected: 80; Actual: 102] which doesn&amp;rsquo;t load correctly into Vim&amp;rsquo;s quickfix list (via :cfile or :cexpr).</description>
    </item>
    
    <item>
      <title>That Vim can transform replacement values when substituting</title>
      <link>https://til.codeinthehole.com/posts/that-vim-can-transform-replacement-values-when-substituting/</link>
      <pubDate>Mon, 15 Nov 2021 10:46:34 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-vim-can-transform-replacement-values-when-substituting/</guid>
      <description>Vim supports a range of special patterns that can transform the replacement value when performing a search and replace.</description>
    </item>
    
    <item>
      <title>How to delete all buffers in Vim</title>
      <link>https://til.codeinthehole.com/posts/how-to-delete-all-buffers-in-vim/</link>
      <pubDate>Tue, 05 Oct 2021 17:14:16 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-delete-all-buffers-in-vim/</guid>
      <description>You can use :%bd (or :%bdelete).
This is a special form of the :N,Mbdelete ranged buffer delete command where % indicates all buffers rather than a numbered range.</description>
    </item>
    
    <item>
      <title>About the `:ALEInfo` command</title>
      <link>https://til.codeinthehole.com/posts/about-the-aleinfo-command/</link>
      <pubDate>Tue, 25 May 2021 10:59:39 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-the-aleinfo-command/</guid>
      <description>The ALE plugin for Vim includes a :ALEInfo command that shows how ALE is configured for the current file and the output of any commands that have run.</description>
    </item>
    
    <item>
      <title>About Vim&#39;s semi-colon search offset</title>
      <link>https://til.codeinthehole.com/posts/about-vims-semicolon-search-offset/</link>
      <pubDate>Fri, 14 May 2021 12:46:44 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-vims-semicolon-search-offset/</guid>
      <description>A search with / or ? can include an additional offset to position the cursor after jumping to the search match.</description>
    </item>
    
    <item>
      <title>That Vim&#39;s uppercase marks are global and persistent</title>
      <link>https://til.codeinthehole.com/posts/that-vims-uppercase-marks-are-global-and-persistent/</link>
      <pubDate>Thu, 06 May 2021 15:42:04 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-vims-uppercase-marks-are-global-and-persistent/</guid>
      <description>Basic stuff but I didn&amp;rsquo;t realise that setting an uppercase mark (e.</description>
    </item>
    
    <item>
      <title>That `vim-polyglot` conflicts with Hub when creating pull requests</title>
      <link>https://til.codeinthehole.com/posts/that-vimpolyglot-conflicts-with-hub-when-creating-pull-requests/</link>
      <pubDate>Tue, 30 Mar 2021 16:46:39 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-vimpolyglot-conflicts-with-hub-when-creating-pull-requests/</guid>
      <description>Hub, the Github CLI tool, allows a pull request to be created from the command line.</description>
    </item>
    
    <item>
      <title>How to use custom functions with `:cdo`</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-custom-functions-with-cdo/</link>
      <pubDate>Mon, 15 Feb 2021 14:36:46 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-custom-functions-with-cdo/</guid>
      <description>Vim&amp;rsquo;s :cdo command lets you run an Ex command in each entry in the quickfix list.</description>
    </item>
    
    <item>
      <title>How to pipe an argument list into Vim</title>
      <link>https://til.codeinthehole.com/posts/how-to-pipe-an-argument-list-into-vim/</link>
      <pubDate>Fri, 15 Jan 2021 09:45:07 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-pipe-an-argument-list-into-vim/</guid>
      <description>Use something like:
echo file1 file2 | xargs -o vim The -o option for xargs re-opens stdin as /dev/tty (rather than the default /dev/null) and is essential otherwise Vim will break your terminal when it exits.</description>
    </item>
    
    <item>
      <title>How to copy the current filepath to the system clipboard in Vim</title>
      <link>https://til.codeinthehole.com/posts/how-to-copy-the-current-filepath-to-the-system-clipboard-in-vim/</link>
      <pubDate>Tue, 12 Jan 2021 11:52:56 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-copy-the-current-filepath-to-the-system-clipboard-in-vim/</guid>
      <description>Run:
:let @* = expand(&amp;#34;%&amp;#34;) where @* references the system clipboard register.</description>
    </item>
    
    <item>
      <title>How to add project-specific Vim settings</title>
      <link>https://til.codeinthehole.com/posts/how-to-add-project-specific-vim-settings/</link>
      <pubDate>Fri, 18 Dec 2020 09:46:49 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-add-project-specific-vim-settings/</guid>
      <description>There&amp;rsquo;s various ways to do this but I quite like using an autocmd based on a buffer&amp;rsquo;s filepath.</description>
    </item>
    
    <item>
      <title>Universal Ctags can index more things than I realised</title>
      <link>https://til.codeinthehole.com/posts/universal-ctags-can-index-more-things-than-i-realised/</link>
      <pubDate>Thu, 10 Dec 2020 18:24:55 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/universal-ctags-can-index-more-things-than-i-realised/</guid>
      <description>For instance, it can index make, markdown and .</description>
    </item>
    
    <item>
      <title>Vim-markdown has some useful commands</title>
      <link>https://til.codeinthehole.com/posts/vimmarkdown-has-some-useful-commands/</link>
      <pubDate>Fri, 04 Dec 2020 17:19:14 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/vimmarkdown-has-some-useful-commands/</guid>
      <description>I use sheerun/vim-polyglot but disable its markdown support in favour of plasticboy/vim-markdown.</description>
    </item>
    
    <item>
      <title>About how to use `keywordprg` effectively</title>
      <link>https://til.codeinthehole.com/posts/about-how-to-use-keywordprg-effectively/</link>
      <pubDate>Fri, 27 Nov 2020 11:42:44 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-how-to-use-keywordprg-effectively/</guid>
      <description>Hitting K in Vim opens the program specified by keywordprg, passing the keyword under the cursor as an argument — effectively executing this:</description>
    </item>
    
    <item>
      <title>How to configure `ctags` to parse Terraform files</title>
      <link>https://til.codeinthehole.com/posts/how-to-configure-ctags-to-parse-terraform-files/</link>
      <pubDate>Thu, 26 Nov 2020 16:09:12 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-configure-ctags-to-parse-terraform-files/</guid>
      <description>If you&amp;rsquo;re using Universal Ctags (which you should be), you just need to add a ~/.</description>
    </item>
    
    <item>
      <title>How to use Bandit with Vim&#39;s quickfix list</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-bandit-with-vims-quickfix-list/</link>
      <pubDate>Thu, 19 Nov 2020 10:54:49 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-bandit-with-vims-quickfix-list/</guid>
      <description>One way to populate Vim&amp;rsquo;s quickfix list is by running :make which runs the program specified by the makeprg setting.</description>
    </item>
    
    <item>
      <title>You can run `:grep` without using parent shell process</title>
      <link>https://til.codeinthehole.com/posts/you-can-run-grep-without-using-parent-shell-process/</link>
      <pubDate>Wed, 04 Nov 2020 16:56:20 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-run-grep-without-using-parent-shell-process/</guid>
      <description>Using ripgrep as a :grep command can be configured with:</description>
    </item>
    
    <item>
      <title>There&#39;s a `QuickFixCmdPost` event in Vim</title>
      <link>https://til.codeinthehole.com/posts/theres-a-quickfixcmdpost-event-in-vim/</link>
      <pubDate>Wed, 04 Nov 2020 11:55:58 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/theres-a-quickfixcmdpost-event-in-vim/</guid>
      <description>Which you can target in an autocmd to open the quickfix window whenever a quickfix command populates the error list (e.</description>
    </item>
    
    <item>
      <title>You can jump to previous quickfix lists in Vim</title>
      <link>https://til.codeinthehole.com/posts/you-can-jump-to-previous-quickfix-lists-in-vim/</link>
      <pubDate>Sat, 31 Oct 2020 11:39:36 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-jump-to-previous-quickfix-lists-in-vim/</guid>
      <description>Vim remembers the previous ten quickfix lists; you can list them with:</description>
    </item>
    
    <item>
      <title>About `shellcheck`</title>
      <link>https://til.codeinthehole.com/posts/about-shellcheck/</link>
      <pubDate>Mon, 12 Oct 2020 10:30:00 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-shellcheck/</guid>
      <description>Which is a static analysis tool for shell scripts.</description>
    </item>
    
    <item>
      <title>How to read from one buffer to another in Vim</title>
      <link>https://til.codeinthehole.com/posts/how-to-read-from-one-buffer-to-another-in-vim/</link>
      <pubDate>Wed, 23 Sep 2020 16:00:09 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-read-from-one-buffer-to-another-in-vim/</guid>
      <description>Refer to the buffer&amp;rsquo;s number using a hash. For example, run:</description>
    </item>
    
    <item>
      <title>About Vim&#39;s `:helpgrep` command</title>
      <link>https://til.codeinthehole.com/posts/about-vims-helpgrep-command/</link>
      <pubDate>Wed, 16 Sep 2020 14:27:56 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-vims-helpgrep-command/</guid>
      <description>Which lets you search Vim&amp;rsquo;s help files for a given pattern.</description>
    </item>
    
    <item>
      <title>Vim recommends using Emacs-style key bindings in command mode</title>
      <link>https://til.codeinthehole.com/posts/vim-recommends-using-emacsstyle-key-bindings-in-command-mode/</link>
      <pubDate>Wed, 16 Sep 2020 09:16:47 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/vim-recommends-using-emacsstyle-key-bindings-in-command-mode/</guid>
      <description>As in, using these command-mode maps:
&amp;#34; start of line :cnoremap &amp;lt;C-A&amp;gt; &amp;lt;Home&amp;gt; &amp;#34; back one character :cnoremap &amp;lt;C-B&amp;gt; &amp;lt;Left&amp;gt; &amp;#34; delete character under cursor :cnoremap &amp;lt;C-D&amp;gt; &amp;lt;Del&amp;gt; &amp;#34; end of line :cnoremap &amp;lt;C-E&amp;gt; &amp;lt;End&amp;gt; &amp;#34; forward one character :cnoremap &amp;lt;C-F&amp;gt; &amp;lt;Right&amp;gt; &amp;#34; recall newer command-line :cnoremap &amp;lt;C-N&amp;gt; &amp;lt;Down&amp;gt; &amp;#34; recall previous (older) command-line :cnoremap &amp;lt;C-P&amp;gt; &amp;lt;Up&amp;gt; &amp;#34; back one word :cnoremap &amp;lt;Esc&amp;gt;&amp;lt;C-B&amp;gt; &amp;lt;S-Left&amp;gt; &amp;#34; forward one word :cnoremap &amp;lt;Esc&amp;gt;&amp;lt;C-F&amp;gt; &amp;lt;S-Right&amp;gt; See http://vimdoc.</description>
    </item>
    
    <item>
      <title>Vim doesn&#39;t create the persistent undo folder automatically</title>
      <link>https://til.codeinthehole.com/posts/vim-doesnt-create-the-persistent-undo-folder-automatically/</link>
      <pubDate>Fri, 04 Sep 2020 11:38:38 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/vim-doesnt-create-the-persistent-undo-folder-automatically/</guid>
      <description>I have this in ~/.vimrc:
&amp;#34; Keep undo history between sessions if has(&amp;#39;persistent_undo&amp;#39;) set undofile set undodir=~/.</description>
    </item>
    
    <item>
      <title>About better YAML file folding in Vim</title>
      <link>https://til.codeinthehole.com/posts/about-better-yaml-file-folding-in-vim/</link>
      <pubDate>Fri, 28 Aug 2020 18:36:09 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-better-yaml-file-folding-in-vim/</guid>
      <description>Using foldmethod=indent is ok but it&amp;rsquo;s better to use the pedrohdz/vim-yaml-folds plugin.</description>
    </item>
    
    <item>
      <title>About `:help macvim`</title>
      <link>https://til.codeinthehole.com/posts/about-help-macvim/</link>
      <pubDate>Mon, 17 Aug 2020 11:53:31 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-help-macvim/</guid>
      <description>MacVim ships with its own help files, accessed via:</description>
    </item>
    
    <item>
      <title>About Vim&#39;s `:diffthis` command</title>
      <link>https://til.codeinthehole.com/posts/about-vims-diffthis-command/</link>
      <pubDate>Mon, 17 Aug 2020 09:28:52 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-vims-diffthis-command/</guid>
      <description>You can manually compare two more open buffers by running:</description>
    </item>
    

  </channel>
</rss>
