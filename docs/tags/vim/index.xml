<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/vim/</link>
    <description>Recent content in Vim on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Nov 2020 11:55:58 +0000</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>There&#39;s a `QuickFixCmdPost` event in Vim</title>
      <link>https://til.codeinthehole.com/posts/theres-a-quickfixcmdpost-event-in-vim/</link>
      <pubDate>Wed, 04 Nov 2020 11:55:58 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/theres-a-quickfixcmdpost-event-in-vim/</guid>
      <description>Which you can target in an autocmd to open the quickfix window whenever a quickfix command populates the error list (e.g. :make or :grep):
autocmd QuickFixCmdPost [^l]* cwindowTaken from https://gist.github.com/romainl/ce55ce6fdc1659c5fbc0f4224fd6ad29</description>
    </item>
    
    <item>
      <title>You can jump to previous quickfix lists in Vim</title>
      <link>https://til.codeinthehole.com/posts/you-can-jump-to-previous-quickfix-lists-in-vim/</link>
      <pubDate>Sat, 31 Oct 2020 11:39:36 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-jump-to-previous-quickfix-lists-in-vim/</guid>
      <description>Vim remembers the previous ten quickfix lists; you can list them with:
:chistory error list 1 of 3; 70 errors :rg --vimgrep --smart-case search error list 2 of 3; 61 errors :rg --vimgrep --smart-case what&amp;gt; error list 3 of 3; 187 errors :rg --vimgrep --smart-case howYou can activate a particular list using its index (e.g. :1chi to select the 1st error list) or by browsing with :colder and :cnewer.
There&amp;rsquo;s a rather glorious section in the quickfix.</description>
    </item>
    
    <item>
      <title>About `shellcheck`</title>
      <link>https://til.codeinthehole.com/posts/about-shellcheck/</link>
      <pubDate>Mon, 12 Oct 2020 10:30:00 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-shellcheck/</guid>
      <description>Which is a static analysis tool for shell scripts. You can try it out by pasting a script into a form and it is run automatically by Vim&amp;rsquo;s Ale plugin.</description>
    </item>
    
    <item>
      <title>How to read from one buffer to another in Vim</title>
      <link>https://til.codeinthehole.com/posts/how-to-read-from-one-buffer-to-another-in-vim/</link>
      <pubDate>Wed, 23 Sep 2020 16:00:09 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-read-from-one-buffer-to-another-in-vim/</guid>
      <description>Refer to the buffer&amp;rsquo;s number using a hash. For example, run:
:read #3to insert the contents of the file linked to buffer 3. Note that a buffer&amp;rsquo;s content isn&amp;rsquo;t necessarily the same as the linked file.
From: https://stackoverflow.com/questions/37859530/vim-how-to-read-from-one-buffer-into-another</description>
    </item>
    
    <item>
      <title>About Vim&#39;s `:helpgrep` command</title>
      <link>https://til.codeinthehole.com/posts/about-vims-helpgrep-command/</link>
      <pubDate>Wed, 16 Sep 2020 14:27:56 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-vims-helpgrep-command/</guid>
      <description>Which lets you search Vim&amp;rsquo;s help files for a given pattern. For example:
:helpgrep What is the meaning of life Discovered via a Hashrocket TIL and an episode of Josh Branchaud&amp;rsquo;s Vim Un-Alphabet screencast series.</description>
    </item>
    
    <item>
      <title>Vim recommends using Emacs-style key bindings in command mode</title>
      <link>https://til.codeinthehole.com/posts/vim-recommends-using-emacsstyle-key-bindings-in-command-mode/</link>
      <pubDate>Wed, 16 Sep 2020 09:16:47 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/vim-recommends-using-emacsstyle-key-bindings-in-command-mode/</guid>
      <description>As in, using these command-mode maps:
&amp;#34; start of line :cnoremap &amp;lt;C-A&amp;gt;	&amp;lt;Home&amp;gt; &amp;#34; back one character :cnoremap &amp;lt;C-B&amp;gt;	&amp;lt;Left&amp;gt; &amp;#34; delete character under cursor :cnoremap &amp;lt;C-D&amp;gt;	&amp;lt;Del&amp;gt; &amp;#34; end of line :cnoremap &amp;lt;C-E&amp;gt;	&amp;lt;End&amp;gt; &amp;#34; forward one character :cnoremap &amp;lt;C-F&amp;gt;	&amp;lt;Right&amp;gt; &amp;#34; recall newer command-line :cnoremap &amp;lt;C-N&amp;gt;	&amp;lt;Down&amp;gt; &amp;#34; recall previous (older) command-line :cnoremap &amp;lt;C-P&amp;gt;	&amp;lt;Up&amp;gt; &amp;#34; back one word :cnoremap &amp;lt;Esc&amp;gt;&amp;lt;C-B&amp;gt;	&amp;lt;S-Left&amp;gt; &amp;#34; forward one word :cnoremap &amp;lt;Esc&amp;gt;&amp;lt;C-F&amp;gt;	&amp;lt;S-Right&amp;gt; See http://vimdoc.</description>
    </item>
    
    <item>
      <title>Vim doesn&#39;t create the persistent undo folder automatically</title>
      <link>https://til.codeinthehole.com/posts/vim-doesnt-create-the-persistent-undo-folder-automatically/</link>
      <pubDate>Fri, 04 Sep 2020 11:38:38 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/vim-doesnt-create-the-persistent-undo-folder-automatically/</guid>
      <description>I have this in ~/.vimrc:
&amp;#34; Keep undo history between sessionsif has(&amp;#39;persistent_undo&amp;#39;) set undofile set undodir=~/.vim_undo set undolevels=2000endifbut, after switching laptops, I noticed the persistent undo feature wasn&amp;rsquo;t working.
The problem was that the ~/.vim_undo folder didn&amp;rsquo;t exist which silently prevents the feature working.
You can create this automaticaly in ~/.vimrc if you like.</description>
    </item>
    
    <item>
      <title>About better YAML file folding in Vim</title>
      <link>https://til.codeinthehole.com/posts/about-better-yaml-file-folding-in-vim/</link>
      <pubDate>Fri, 28 Aug 2020 18:36:09 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-better-yaml-file-folding-in-vim/</guid>
      <description>Using foldmethod=indent is ok but it&amp;rsquo;s better to use the pedrohdz/vim-yaml-folds plugin. The author gives more detail in Vim folding rules for YAML.</description>
    </item>
    
    <item>
      <title>About `:help macvim`</title>
      <link>https://til.codeinthehole.com/posts/about-help-macvim/</link>
      <pubDate>Mon, 17 Aug 2020 11:53:31 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-help-macvim/</guid>
      <description>MacVim ships with its own help files, accessed via:
:help macvimThese provide lots of useful info on things like:
 The differences between MacVim and other Vim variants MacVim-specific preferences The macvim color scheme  and much more.</description>
    </item>
    
    <item>
      <title>About Vim&#39;s `:diffthis` command</title>
      <link>https://til.codeinthehole.com/posts/about-vims-diffthis-command/</link>
      <pubDate>Mon, 17 Aug 2020 09:28:52 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-vims-diffthis-command/</guid>
      <description>You can manually compare two more open buffers by running:
:windo diffthisThis is an alternative to opening the files with vimdiff. One advantage is that you compare buffers that aren&amp;rsquo;t files (eg text pasted from the clipboard).
Further reading:
 There&amp;rsquo;s some useful info in the &amp;ldquo;Comparing buffers with vimdiff&amp;rdquo; screencast. :help :diffthis  </description>
    </item>
    

  </channel>
</rss>
