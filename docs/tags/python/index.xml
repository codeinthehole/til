<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/python/</link>
    <description>Recent content in Python on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Mar 2023 21:36:32 +0000</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>How to create a word cloud from text piped via STDIN</title>
      <link>https://til.codeinthehole.com/posts/how-to-create-a-word-cloud-from-text-piped-via-stdin/</link>
      <pubDate>Wed, 01 Mar 2023 21:36:32 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-create-a-word-cloud-from-text-piped-via-stdin/</guid>
      <description>There&amp;rsquo;s a word_cloud generator package available from PyPI that can take its source text from STDIN:</description>
    </item>
    
    <item>
      <title>Not to union Python list types</title>
      <link>https://til.codeinthehole.com/posts/not-to-union-python-list-types/</link>
      <pubDate>Sat, 28 Jan 2023 11:21:10 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/not-to-union-python-list-types/</guid>
      <description>Consider this contrived function which either returns a list of tuples or a list of dicts depending on an argument value:</description>
    </item>
    
    <item>
      <title>How to handle convenience imports with Mypy</title>
      <link>https://til.codeinthehole.com/posts/how-to-handle-convenience-imports-with-mypy/</link>
      <pubDate>Wed, 23 Nov 2022 17:24:46 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-handle-convenience-imports-with-mypy/</guid>
      <description>Python convenience imports are where objects are imported into a package&amp;rsquo;s __init__.</description>
    </item>
    
    <item>
      <title>How Django&#39;s `override_settings` decorator causes flakey tests</title>
      <link>https://til.codeinthehole.com/posts/how-djangos-overridesettings-decorator-causes-flakey-tests/</link>
      <pubDate>Sun, 13 Nov 2022 17:09:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-djangos-overridesettings-decorator-causes-flakey-tests/</guid>
      <description>This form can cause flakey tests:
from django import forms from django.</description>
    </item>
    
    <item>
      <title>Mypy skips empty functions</title>
      <link>https://til.codeinthehole.com/posts/mypy-skips-empty-functions/</link>
      <pubDate>Tue, 11 Oct 2022 09:56:57 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/mypy-skips-empty-functions/</guid>
      <description>Mypy doesn&amp;rsquo;t check types of empty functions, such as those whose implementation is pass, .</description>
    </item>
    
    <item>
      <title>It&#39;s better to explicitly chain Python exceptions</title>
      <link>https://til.codeinthehole.com/posts/its-better-to-explicitly-chain-exceptions/</link>
      <pubDate>Mon, 12 Sep 2022 18:16:01 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/its-better-to-explicitly-chain-exceptions/</guid>
      <description>When converting one type of exception to another in an except block, it&amp;rsquo;s best to explicitly chain them using the from keyword.</description>
    </item>
    
    <item>
      <title>About indirect parametrization with Pytest</title>
      <link>https://til.codeinthehole.com/posts/about-indirect-parametrization-with-pytest/</link>
      <pubDate>Wed, 24 Aug 2022 14:24:35 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-indirect-parametrization-with-pytest/</guid>
      <description>Pytest&amp;rsquo;s pytest.mark.parametrize function supports an indirect argument that allows a parametrized test to have its parameter passed to a fixture function, rather than directly into the test function.</description>
    </item>
    
    <item>
      <title>That Python&#39;s `datetime` package doesn&#39;t support ordinal suffixes for the day of the month</title>
      <link>https://til.codeinthehole.com/posts/that-pythons-datetime-package-doesnt-support-ordinal-suffixes-for-the-day-of-the-month/</link>
      <pubDate>Wed, 01 Jun 2022 16:29:28 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-pythons-datetime-package-doesnt-support-ordinal-suffixes-for-the-day-of-the-month/</guid>
      <description>Django&amp;rsquo;s date template filter (and underlying django.utils.dateformat module) support using S as a format character for the English ordinal suffix for the day of the month.</description>
    </item>
    
    <item>
      <title>How to inspect and clear Python&#39;s `functools.lru_cache`</title>
      <link>https://til.codeinthehole.com/posts/how-to-inspect-and-clear-pythons-functoolslrucache/</link>
      <pubDate>Mon, 21 Feb 2022 21:01:02 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-inspect-and-clear-pythons-functoolslrucache/</guid>
      <description>Python&amp;rsquo;s functools.lru_cache binds two additional functions to decorated functions:</description>
    </item>
    
    <item>
      <title>About Factory Boy&#39;s `SelfAttribute` class</title>
      <link>https://til.codeinthehole.com/posts/about-factory-boys-selfattribute-class/</link>
      <pubDate>Wed, 16 Feb 2022 09:17:38 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-factory-boys-selfattribute-class/</guid>
      <description>Factory Boy has a useful SelfAttribute class that lets a field reference another field of the object being constructed.</description>
    </item>
    
    <item>
      <title>You can&#39;t use Django&#39;s generic foreign key field with objects stored in a separate database</title>
      <link>https://til.codeinthehole.com/posts/you-cant-use-djangos-generic-foreign-key-field-with-objects-stored-in-a-separate-database/</link>
      <pubDate>Wed, 02 Feb 2022 11:55:29 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-cant-use-djangos-generic-foreign-key-field-with-objects-stored-in-a-separate-database/</guid>
      <description>Django supports using separate databases for specified models or apps.</description>
    </item>
    
    <item>
      <title>About Django&#39;s `setup` method for generic view classes</title>
      <link>https://til.codeinthehole.com/posts/about-djangos-setup-method-for-generic-view-classes/</link>
      <pubDate>Tue, 14 Dec 2021 15:55:28 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-djangos-setup-method-for-generic-view-classes/</guid>
      <description>Django 2.2 (released in April 2019) introduced a setup method to the django.</description>
    </item>
    
    <item>
      <title>How to use `aws-mfa-v2` to avoid entering so many MFA tokens</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-awsmfav2-to-avoid-entering-so-many-mfa-tokens/</link>
      <pubDate>Mon, 08 Nov 2021 17:48:54 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-awsmfav2-to-avoid-entering-so-many-mfa-tokens/</guid>
      <description>Prior to being told about aws-mfa-v2 my ~/.aws/config file looked like this:</description>
    </item>
    
    <item>
      <title>About a gotcha with `psycopg2`&#39;s autocommit handling</title>
      <link>https://til.codeinthehole.com/posts/about-a-gotcha-with-psycopg2s-autocommit-handling/</link>
      <pubDate>Fri, 05 Nov 2021 16:54:26 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-a-gotcha-with-psycopg2s-autocommit-handling/</guid>
      <description>Some commands in Postgres can&amp;rsquo;t be run inside a transaction (e.</description>
    </item>
    
    <item>
      <title>Python&#39;s `envparse` library has counter-intuitive boolean casting</title>
      <link>https://til.codeinthehole.com/posts/pythons-envparse-library-has-counterintuitive-boolean-casting/</link>
      <pubDate>Thu, 14 Oct 2021 14:14:59 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pythons-envparse-library-has-counterintuitive-boolean-casting/</guid>
      <description>If you use env.bool from the envparse library to convert an environment variable into a boolean Python variable then only an allow-list of strings are considered truthy.</description>
    </item>
    
    <item>
      <title>Factory boy can be used to build dicts</title>
      <link>https://til.codeinthehole.com/posts/factory-boy-can-be-used-to-build-dicts/</link>
      <pubDate>Thu, 30 Sep 2021 13:56:48 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/factory-boy-can-be-used-to-build-dicts/</guid>
      <description>Conventionally subclasses of factory.Factory are used to build objects, often Django models that are persisted to some data store.</description>
    </item>
    
    <item>
      <title>Django settings prefixed with an underscore are private</title>
      <link>https://til.codeinthehole.com/posts/django-settings-prefixed-with-an-underscore-are-private/</link>
      <pubDate>Mon, 20 Sep 2021 15:04:15 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/django-settings-prefixed-with-an-underscore-are-private/</guid>
      <description>As in: you can&amp;rsquo;t access them from outside the settings module.</description>
    </item>
    
    <item>
      <title>Django doesn&#39;t flush caches between tests</title>
      <link>https://til.codeinthehole.com/posts/django-doesnt-flush-caches-between-tests/</link>
      <pubDate>Fri, 23 Jul 2021 15:03:26 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/django-doesnt-flush-caches-between-tests/</guid>
      <description>This is slightly counter-intuitive as it&amp;rsquo;s different to how databases are treated by the test runner.</description>
    </item>
    
    <item>
      <title>How Django&#39;s management commands need to be type hinted</title>
      <link>https://til.codeinthehole.com/posts/how-djangos-management-commands-need-to-be-type-hinted/</link>
      <pubDate>Thu, 22 Jul 2021 17:31:28 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-djangos-management-commands-need-to-be-type-hinted/</guid>
      <description>For Django management commands with arguments, you might not expect Mypy (configured with the django-stubs plugin) to complain about this signature:</description>
    </item>
    
    <item>
      <title>File-level flake8 comments ignore all errors</title>
      <link>https://til.codeinthehole.com/posts/filelevel-flake8-comments-ignore-all-errors/</link>
      <pubDate>Wed, 21 Jul 2021 15:01:33 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/filelevel-flake8-comments-ignore-all-errors/</guid>
      <description>Until today, I was under the impression that including:</description>
    </item>
    
    <item>
      <title>That Pytest&#39;s &#34;keyword expression&#34; filtering supports Python conditionals</title>
      <link>https://til.codeinthehole.com/posts/that-pytests-keyword-expression-filtering-supports-python-conditionals/</link>
      <pubDate>Fri, 16 Jul 2021 15:17:08 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-pytests-keyword-expression-filtering-supports-python-conditionals/</guid>
      <description>When using Pytest&amp;rsquo;s -k filtering, you can use Python expressions to combine separate search terms.</description>
    </item>
    
    <item>
      <title>That FreezeGun doesn&#39;t work with Pytest fixtures (unless you use `pytest-freezegun`)</title>
      <link>https://til.codeinthehole.com/posts/that-freezegun-doesnt-work-with-pytest-fixtures/</link>
      <pubDate>Mon, 12 Jul 2021 17:05:19 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-freezegun-doesnt-work-with-pytest-fixtures/</guid>
      <description>Wrapping tests classes with FreezeGun&amp;rsquo;s @freezegun.freeze_time doesn&amp;rsquo;t control calls to the system clock from fixtures.</description>
    </item>
    
    <item>
      <title>About `mypy`&#39;s unreachable code functionality</title>
      <link>https://til.codeinthehole.com/posts/about-mypys-unreachable-code-functionality/</link>
      <pubDate>Mon, 21 Jun 2021 14:54:25 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-mypys-unreachable-code-functionality/</guid>
      <description>Mypy can be configured to raise an error when it finds unreachable code.</description>
    </item>
    
    <item>
      <title>About `mypy`&#39;s `reveal_type` and `reveal_locals` functions</title>
      <link>https://til.codeinthehole.com/posts/about-mypys-revealtype-and-reveallocals-functions/</link>
      <pubDate>Wed, 16 Jun 2021 17:33:21 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-mypys-revealtype-and-reveallocals-functions/</guid>
      <description>Which can be used for debugging type annotation problems.</description>
    </item>
    
    <item>
      <title>That `mypy` only type-checks functions that have at least one type annotation</title>
      <link>https://til.codeinthehole.com/posts/that-mypy-only-typechecks-functions-that-have-at-least-one-type-annotation/</link>
      <pubDate>Wed, 16 Jun 2021 15:16:58 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-mypy-only-typechecks-functions-that-have-at-least-one-type-annotation/</guid>
      <description>This is noted in the common issues and solutions documentation.</description>
    </item>
    
    <item>
      <title>Python&#39;s `csv.writer` function defaults to Windows line endings</title>
      <link>https://til.codeinthehole.com/posts/pythons-csvwriter-function-defaults-to-windows-line-endings/</link>
      <pubDate>Tue, 20 Apr 2021 21:45:28 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pythons-csvwriter-function-defaults-to-windows-line-endings/</guid>
      <description>I was confused as to why awk wasn&amp;rsquo;t matching the final element in a CSV stream from csv.</description>
    </item>
    
    <item>
      <title>You can have class-scoped autouse pytest fixtures</title>
      <link>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</link>
      <pubDate>Tue, 16 Mar 2021 17:36:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</guid>
      <description>If you decorate a class instance method as an autouse=True Pytest fixture, then it will be automatically applied for all test methods on that class.</description>
    </item>
    
    <item>
      <title>`pdbpp` has a useful &#39;sticky&#39; mode</title>
      <link>https://til.codeinthehole.com/posts/pdbpp-has-a-useful-sticky-mode/</link>
      <pubDate>Thu, 11 Mar 2021 13:34:25 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pdbpp-has-a-useful-sticky-mode/</guid>
      <description>pdbpp provides some additional interactive commands to pdb. One such command is sticky which toggles &amp;ldquo;sticky mode&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>To prefer `dateutil` over `pytz`</title>
      <link>https://til.codeinthehole.com/posts/to-prefer-dateutil-over-pytz/</link>
      <pubDate>Thu, 04 Mar 2021 16:09:11 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/to-prefer-dateutil-over-pytz/</guid>
      <description>When constructing datetime.datetime instances, it&amp;rsquo;s better to use dateutil to provide the tzinfo argument — avoid using pytz.</description>
    </item>
    
    <item>
      <title>Pytest doesn&#39;t play nicely with ipdb</title>
      <link>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</link>
      <pubDate>Tue, 02 Mar 2021 12:30:06 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</guid>
      <description>To ensure breakpoint() triggers ipdb as my default debugger, I used to set:</description>
    </item>
    
    <item>
      <title>You can arbitrarily chain Python comparison operations</title>
      <link>https://til.codeinthehole.com/posts/you-can-arbitrarily-chain-python-comparison-operators/</link>
      <pubDate>Fri, 15 Jan 2021 16:05:14 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-arbitrarily-chain-python-comparison-operators/</guid>
      <description>Which explains why:
&amp;gt;&amp;gt;&amp;gt; False == False in [False] True This odd looking expression is equivalent to (False == False) and (False in [False]), hence why it evaluates to True.</description>
    </item>
    
    <item>
      <title>You can stack `pytest`&#39;s `parametrize` decorators</title>
      <link>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</link>
      <pubDate>Wed, 16 Dec 2020 10:41:26 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</guid>
      <description>As in:
import pytest @pytest.mark.parametrize(&amp;#34;x&amp;#34;, [1,2,3]) @pytest.mark.parametrize(&amp;#34;y&amp;#34;, [4,5,6]) def test_cartesian_product(x, y): pass which will run the test for all combinations of the two input lists:</description>
    </item>
    
    <item>
      <title>You can label parameterized fixtures with pytest</title>
      <link>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</link>
      <pubDate>Fri, 11 Dec 2020 13:28:09 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</guid>
      <description>For example, running this parameterized test:
@pytest.mark.parametrize( &amp;#34;date&amp;#34;, ( datetime.</description>
    </item>
    
    <item>
      <title>A better way of configuring `mypy`</title>
      <link>https://til.codeinthehole.com/posts/a-better-way-of-configuring-mypy/</link>
      <pubDate>Thu, 10 Dec 2020 15:51:44 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/a-better-way-of-configuring-mypy/</guid>
      <description>I didn&amp;rsquo;t realise you can put all your config into setup.</description>
    </item>
    
    <item>
      <title>`datetime.datetime` is a subclass of `datetime.date`</title>
      <link>https://til.codeinthehole.com/posts/datetimedatetime-is-a-subclass-of-datetimedate/</link>
      <pubDate>Thu, 22 Oct 2020 15:38:04 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/datetimedatetime-is-a-subclass-of-datetimedate/</guid>
      <description>See for yourself:
&amp;gt;&amp;gt;&amp;gt; import datetime &amp;gt;&amp;gt;&amp;gt; isinstance(datetime.datetime.now(), datetime.</description>
    </item>
    
    <item>
      <title>About `pip-licenses`</title>
      <link>https://til.codeinthehole.com/posts/about-piplicenses/</link>
      <pubDate>Thu, 08 Oct 2020 14:56:38 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-piplicenses/</guid>
      <description>Which is a useful Python library that lists all the licenses of packages installed with pip:</description>
    </item>
    
    <item>
      <title>Python 3.7 supports postponed evaluation of annotations</title>
      <link>https://til.codeinthehole.com/posts/python-37-supports-postponed-evaluation-of-annotations/</link>
      <pubDate>Fri, 04 Sep 2020 16:27:33 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/python-37-supports-postponed-evaluation-of-annotations/</guid>
      <description>For example, instead of:
import _csv def generate_report(writer: &amp;#39;_csv.</description>
    </item>
    
    <item>
      <title>How to use type annotations with Python&#39;s `csv` module</title>
      <link>https://til.codeinthehole.com/posts/how-to-typecheck-csv-objects-in-python/</link>
      <pubDate>Thu, 03 Sep 2020 17:13:22 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-typecheck-csv-objects-in-python/</guid>
      <description>Adding a type annotation for a &amp;ldquo;writer&amp;rdquo; object created by csv.</description>
    </item>
    

  </channel>
</rss>
