<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/python/</link>
    <description>Recent content in Python on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Apr 2021 21:45:28 +0100</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>Python&#39;s `csv.writer` function defaults to Windows line endings</title>
      <link>https://til.codeinthehole.com/posts/pythons-csvwriter-function-defaults-to-windows-line-endings/</link>
      <pubDate>Tue, 20 Apr 2021 21:45:28 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pythons-csvwriter-function-defaults-to-windows-line-endings/</guid>
      <description>I was confused as to why awk wasn&amp;rsquo;t matching the final element in a CSV stream from csv.</description>
    </item>
    
    <item>
      <title>You can have class-scoped autouse pytest fixtures</title>
      <link>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</link>
      <pubDate>Tue, 16 Mar 2021 17:36:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</guid>
      <description>If you decorate a class instance method as an autouse=True pytest fixture, then it will be automatically applied for all test methods on that class.</description>
    </item>
    
    <item>
      <title>`pdbpp` has a useful &#39;sticky&#39; mode</title>
      <link>https://til.codeinthehole.com/posts/pdbpp-has-a-useful-sticky-mode/</link>
      <pubDate>Thu, 11 Mar 2021 13:34:25 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pdbpp-has-a-useful-sticky-mode/</guid>
      <description>pdbpp provides some additional interactive commands to pdb. One such command is sticky which toggles &amp;ldquo;sticky mode&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>To prefer `dateutil` over `pytz`</title>
      <link>https://til.codeinthehole.com/posts/to-prefer-dateutil-over-pytz/</link>
      <pubDate>Thu, 04 Mar 2021 16:09:11 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/to-prefer-dateutil-over-pytz/</guid>
      <description>When constructing datetime.datetime instances, it&amp;rsquo;s better to use dateutil to provide the tzinfo argument â€” avoid using pytz.</description>
    </item>
    
    <item>
      <title>Pytest doesn&#39;t play nicely with ipdb</title>
      <link>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</link>
      <pubDate>Tue, 02 Mar 2021 12:30:06 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</guid>
      <description>To ensure breakpoint() triggers ipdb as my default debugger, I used to set:</description>
    </item>
    
    <item>
      <title>You can arbitrarily chain Python comparison operations</title>
      <link>https://til.codeinthehole.com/posts/you-can-arbitrarily-chain-python-comparison-operators/</link>
      <pubDate>Fri, 15 Jan 2021 16:05:14 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-arbitrarily-chain-python-comparison-operators/</guid>
      <description>Which explains why:
&amp;gt;&amp;gt;&amp;gt; False == False in [False] True This odd looking expression is equivalent to (False == False) and (False in [False]), hence why it evaluates to True.</description>
    </item>
    
    <item>
      <title>You can stack `pytest`&#39;s `parametrize` decorators</title>
      <link>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</link>
      <pubDate>Wed, 16 Dec 2020 10:41:26 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</guid>
      <description>As in:
import pytest @pytest.mark.parametrize(&amp;#34;x&amp;#34;, [1,2,3]) @pytest.mark.parametrize(&amp;#34;y&amp;#34;, [4,5,6]) def test_cartesian_product(x, y): pass which will run the test for all combinations of the two input lists:</description>
    </item>
    
    <item>
      <title>You can label parameterized fixtures with pytest</title>
      <link>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</link>
      <pubDate>Fri, 11 Dec 2020 13:28:09 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</guid>
      <description>For example, running this parameterized test:
@pytest.mark.parametrize( &amp;#34;date&amp;#34;, ( datetime.</description>
    </item>
    
    <item>
      <title>A better way of configuring `mypy`</title>
      <link>https://til.codeinthehole.com/posts/a-better-way-of-configuring-mypy/</link>
      <pubDate>Thu, 10 Dec 2020 15:51:44 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/a-better-way-of-configuring-mypy/</guid>
      <description>I didn&amp;rsquo;t realise you can put all your config into setup.</description>
    </item>
    
    <item>
      <title>`datetime.datetime` is a subclass of `datetime.date`</title>
      <link>https://til.codeinthehole.com/posts/datetimedatetime-is-a-subclass-of-datetimedate/</link>
      <pubDate>Thu, 22 Oct 2020 15:38:04 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/datetimedatetime-is-a-subclass-of-datetimedate/</guid>
      <description>See for yourself:
&amp;gt;&amp;gt;&amp;gt; import datetime &amp;gt;&amp;gt;&amp;gt; isinstance(datetime.datetime.now(), datetime.</description>
    </item>
    
    <item>
      <title>About `pip-licenses`</title>
      <link>https://til.codeinthehole.com/posts/about-piplicenses/</link>
      <pubDate>Thu, 08 Oct 2020 14:56:38 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-piplicenses/</guid>
      <description>Which is a useful Python library that lists all the licenses of packages installed with pip:</description>
    </item>
    
    <item>
      <title>Python 3.7 supports postponed evaluation of annotations</title>
      <link>https://til.codeinthehole.com/posts/python-37-supports-postponed-evaluation-of-annotations/</link>
      <pubDate>Fri, 04 Sep 2020 16:27:33 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/python-37-supports-postponed-evaluation-of-annotations/</guid>
      <description>For example, instead of:
import _csv def generate_report(writer: &amp;#39;_csv.</description>
    </item>
    
    <item>
      <title>How to use type annotations with Python&#39;s `csv` module</title>
      <link>https://til.codeinthehole.com/posts/how-to-typecheck-csv-objects-in-python/</link>
      <pubDate>Thu, 03 Sep 2020 17:13:22 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-typecheck-csv-objects-in-python/</guid>
      <description>Adding a type annotation for a &amp;ldquo;writer&amp;rdquo; object created by csv.</description>
    </item>
    

  </channel>
</rss>
