<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/testing/</link>
    <description>Recent content in Testing on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Mar 2021 17:36:21 +0000</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>You can have class-scoped autouse pytest fixtures</title>
      <link>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</link>
      <pubDate>Tue, 16 Mar 2021 17:36:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</guid>
      <description>If you decorate a class instance method as an autouse=True pytest fixture, then it will be automatically applied for all test methods on that class.</description>
    </item>
    
    <item>
      <title>Pytest doesn&#39;t play nicely with ipdb</title>
      <link>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</link>
      <pubDate>Tue, 02 Mar 2021 12:30:06 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</guid>
      <description>To ensure breakpoint() triggers ipdb as my default debugger, I used to set:</description>
    </item>
    
    <item>
      <title>How to easily disable a CircleCI workflow</title>
      <link>https://til.codeinthehole.com/posts/how-to-easily-disable-a-circleci-workflow/</link>
      <pubDate>Fri, 08 Jan 2021 12:32:30 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-easily-disable-a-circleci-workflow/</guid>
      <description>Sometimes it&amp;rsquo;s useful to only run a subset of CircleCI jobs after each commit to a pull request branch.</description>
    </item>
    
    <item>
      <title>You can stack `pytest`&#39;s `parametrize` decorators</title>
      <link>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</link>
      <pubDate>Wed, 16 Dec 2020 10:41:26 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</guid>
      <description>As in:
import pytest @pytest.mark.parametrize(&amp;#34;x&amp;#34;, [1,2,3]) @pytest.mark.parametrize(&amp;#34;y&amp;#34;, [4,5,6]) def test_cartesian_product(x, y): pass which will run the test for all combinations of the two input lists:</description>
    </item>
    
    <item>
      <title>You can label parameterized fixtures with pytest</title>
      <link>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</link>
      <pubDate>Fri, 11 Dec 2020 13:28:09 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</guid>
      <description>For example, running this parameterized test:
@pytest.mark.parametrize( &amp;#34;date&amp;#34;, ( datetime.</description>
    </item>
    

  </channel>
</rss>
