<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/testing/</link>
    <description>Recent content in Testing on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Oct 2022 17:43:06 +0100</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>That Postgres sequences aren&#39;t restored after a transaction rollback</title>
      <link>https://til.codeinthehole.com/posts/that-postgres-sequences-arent-restored-after-a-rollback/</link>
      <pubDate>Tue, 18 Oct 2022 17:43:06 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-postgres-sequences-arent-restored-after-a-rollback/</guid>
      <description>Verify by creating a table and inserting a single row</description>
    </item>
    
    <item>
      <title>Python tests using `moto` should be explicit about AWS regions</title>
      <link>https://til.codeinthehole.com/posts/python-tests-using-moto-should-be-explicit-about-aws-regions/</link>
      <pubDate>Tue, 04 Oct 2022 15:42:26 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/python-tests-using-moto-should-be-explicit-about-aws-regions/</guid>
      <description>Consider this test that creates an S3 bucket using moto:</description>
    </item>
    
    <item>
      <title>About indirect parametrization with Pytest</title>
      <link>https://til.codeinthehole.com/posts/about-indirect-parametrization-with-pytest/</link>
      <pubDate>Wed, 24 Aug 2022 14:24:35 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-indirect-parametrization-with-pytest/</guid>
      <description>Pytest&amp;rsquo;s pytest.mark.parametrize function supports an indirect argument that allows a parametrized test to have its parameter passed to a fixture function, rather than directly into the test function.</description>
    </item>
    
    <item>
      <title>How to use `xmllint` to extract the failing test filenames from a JUnit-XML file</title>
      <link>https://til.codeinthehole.com/posts/how-to-use-xmllint-to-extract-the-failing-test-filenames-from-a-junitxml-file/</link>
      <pubDate>Tue, 28 Jun 2022 12:25:07 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-use-xmllint-to-extract-the-failing-test-filenames-from-a-junitxml-file/</guid>
      <description>Pytest will generate a JUnit-XML result report when run with the --junitxml option.</description>
    </item>
    
    <item>
      <title>How to override Django&#39;s settings for every method in a test class</title>
      <link>https://til.codeinthehole.com/posts/how-to-override-django-settings-for-every-method-in-a-test-class/</link>
      <pubDate>Mon, 27 Jun 2022 18:55:54 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-override-django-settings-for-every-method-in-a-test-class/</guid>
      <description>Django&amp;rsquo;s override_settings decorator only works on functions and methods in subclasses of unittest.</description>
    </item>
    
    <item>
      <title>How to profile Pytest tests</title>
      <link>https://til.codeinthehole.com/posts/how-to-profile-pytest-tests/</link>
      <pubDate>Thu, 23 Jun 2022 10:36:09 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-profile-pytest-tests/</guid>
      <description>If you install the pytest-monitor package, then PyTest invocations will collect test profiling information in a SQLite database (called .</description>
    </item>
    
    <item>
      <title>About Factory Boy&#39;s `SelfAttribute` class</title>
      <link>https://til.codeinthehole.com/posts/about-factory-boys-selfattribute-class/</link>
      <pubDate>Wed, 16 Feb 2022 09:17:38 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-factory-boys-selfattribute-class/</guid>
      <description>Factory Boy has a useful SelfAttribute class that lets a field reference another field of the object being constructed.</description>
    </item>
    
    <item>
      <title>Factory boy can be used to build dicts</title>
      <link>https://til.codeinthehole.com/posts/factory-boy-can-be-used-to-build-dicts/</link>
      <pubDate>Thu, 30 Sep 2021 13:56:48 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/factory-boy-can-be-used-to-build-dicts/</guid>
      <description>Conventionally subclasses of factory.Factory are used to build objects, often Django models that are persisted to some data store.</description>
    </item>
    
    <item>
      <title>Django doesn&#39;t flush caches between tests</title>
      <link>https://til.codeinthehole.com/posts/django-doesnt-flush-caches-between-tests/</link>
      <pubDate>Fri, 23 Jul 2021 15:03:26 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/django-doesnt-flush-caches-between-tests/</guid>
      <description>This is slightly counter-intuitive as it&amp;rsquo;s different to how databases are treated by the test runner.</description>
    </item>
    
    <item>
      <title>That Pytest&#39;s &#34;keyword expression&#34; filtering supports Python conditionals</title>
      <link>https://til.codeinthehole.com/posts/that-pytests-keyword-expression-filtering-supports-python-conditionals/</link>
      <pubDate>Fri, 16 Jul 2021 15:17:08 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-pytests-keyword-expression-filtering-supports-python-conditionals/</guid>
      <description>When using Pytest&amp;rsquo;s -k filtering, you can use Python expressions to combine separate search terms.</description>
    </item>
    
    <item>
      <title>That FreezeGun doesn&#39;t work with Pytest fixtures (unless you use `pytest-freezegun`)</title>
      <link>https://til.codeinthehole.com/posts/that-freezegun-doesnt-work-with-pytest-fixtures/</link>
      <pubDate>Mon, 12 Jul 2021 17:05:19 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-freezegun-doesnt-work-with-pytest-fixtures/</guid>
      <description>Wrapping tests classes with FreezeGun&amp;rsquo;s @freezegun.freeze_time doesn&amp;rsquo;t control calls to the system clock from fixtures.</description>
    </item>
    
    <item>
      <title>You can have class-scoped autouse pytest fixtures</title>
      <link>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</link>
      <pubDate>Tue, 16 Mar 2021 17:36:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-have-classscoped-autouse-pytest-fixtures/</guid>
      <description>If you decorate a class instance method as an autouse=True Pytest fixture, then it will be automatically applied for all test methods on that class.</description>
    </item>
    
    <item>
      <title>Pytest doesn&#39;t play nicely with ipdb</title>
      <link>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</link>
      <pubDate>Tue, 02 Mar 2021 12:30:06 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/pytest-doesnt-play-nicely-with-ipdb/</guid>
      <description>To ensure breakpoint() triggers ipdb as my default debugger, I used to set:</description>
    </item>
    
    <item>
      <title>How to easily disable a CircleCI workflow</title>
      <link>https://til.codeinthehole.com/posts/how-to-easily-disable-a-circleci-workflow/</link>
      <pubDate>Fri, 08 Jan 2021 12:32:30 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-easily-disable-a-circleci-workflow/</guid>
      <description>Sometimes it&amp;rsquo;s useful to only run a subset of CircleCI jobs after each commit to a pull request branch.</description>
    </item>
    
    <item>
      <title>You can stack `pytest`&#39;s `parametrize` decorators</title>
      <link>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</link>
      <pubDate>Wed, 16 Dec 2020 10:41:26 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-stack-pytests-parametrize-decorators/</guid>
      <description>As in:
import pytest @pytest.mark.parametrize(&amp;#34;x&amp;#34;, [1,2,3]) @pytest.mark.parametrize(&amp;#34;y&amp;#34;, [4,5,6]) def test_cartesian_product(x, y): pass which will run the test for all combinations of the two input lists:</description>
    </item>
    
    <item>
      <title>You can label parameterized fixtures with pytest</title>
      <link>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</link>
      <pubDate>Fri, 11 Dec 2020 13:28:09 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/you-can-label-parameterized-fixtures-with-pytest/</guid>
      <description>For example, running this parameterized test:
@pytest.mark.parametrize( &amp;#34;date&amp;#34;, ( datetime.</description>
    </item>
    

  </channel>
</rss>
