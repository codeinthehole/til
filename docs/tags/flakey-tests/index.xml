<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Flakey Tests - Today I Learnt â€” David Winterbottom</title>
    <link>https://til.codeinthehole.com/tags/flakey-tests/</link>
    <description>Flakey Tests TILs - David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Nov 2022 17:09:21 +0000</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/flakey-tests/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>How Django&#39;s `override_settings` decorator causes flakey tests</title>
      <link>https://til.codeinthehole.com/posts/how-djangos-overridesettings-decorator-causes-flakey-tests/</link>
      <pubDate>Sun, 13 Nov 2022 17:09:21 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-djangos-overridesettings-decorator-causes-flakey-tests/</guid>
      <description>This form can cause flakey tests:
from django import forms from django.conf import settings class IceCreamForm(forms.Form): flavour = forms.ChoiceField(choices=settings.FLAVOURS) The critical detail is that the ChoiceField choices are computed at import-time using settings.
</description>
    </item>
    
    <item>
      <title>How the `new` argument to `mock.patch` is shared between parameterized tests</title>
      <link>https://til.codeinthehole.com/posts/how-the-new-argument-to-mockpatch-is-shared-between-parameterized-tests/</link>
      <pubDate>Tue, 08 Nov 2022 18:16:53 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-the-new-argument-to-mockpatch-is-shared-between-parameterized-tests/</guid>
      <description>Consider this contrived test:
from unittest import mock import pytest def get_config(): &amp;#34;&amp;#34;&amp;#34;Return a config object with a &amp;#39;salutation&amp;#39; attribute.&amp;#34;&amp;#34;&amp;#34; pass def say_hello(name): &amp;#34;&amp;#34;&amp;#34;Return a greeting.&amp;#34;&amp;#34;&amp;#34; return get_config().salutation + &amp;#34; &amp;#34; + name @mock.patch( __name__ + &amp;#34;.get_config&amp;#34;, new=mock.Mock(return_value=mock.Mock(salutation=&amp;#34;Hello&amp;#34;)) ) @pytest.mark.parametrize(&amp;#34;name&amp;#34;, (&amp;#34;Alan&amp;#34;, &amp;#34;Barry&amp;#34;, &amp;#34;Calum&amp;#34;)) def test_say_hello(name): assert say_hello(name) == f&amp;#34;Hello {name}&amp;#34; We are testing the say_hello function three times with different arguments and use mock.patch to stub the response of the get_config function, passing in the replacement version at compile/collection time using the new parameter.
</description>
    </item>
    
    <item>
      <title>That Postgres sequences aren&#39;t restored after a transaction rollback</title>
      <link>https://til.codeinthehole.com/posts/that-postgres-sequences-arent-restored-after-a-rollback/</link>
      <pubDate>Tue, 18 Oct 2022 17:43:06 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/that-postgres-sequences-arent-restored-after-a-rollback/</guid>
      <description>Verify by creating a table and inserting a single row
</description>
    </item>
    
    <item>
      <title>How to inspect and clear Python&#39;s `functools.lru_cache`</title>
      <link>https://til.codeinthehole.com/posts/how-to-inspect-and-clear-pythons-functoolslrucache/</link>
      <pubDate>Mon, 21 Feb 2022 21:01:02 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/how-to-inspect-and-clear-pythons-functoolslrucache/</guid>
      <description>Python&amp;rsquo;s functools.lru_cache binds two additional functions to decorated functions:
</description>
    </item>
    

  </channel>
</rss>
