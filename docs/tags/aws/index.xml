<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS - Today I Learnt...</title>
    <link>https://til.codeinthehole.com/tags/aws/</link>
    <description>Recent content in AWS on Today I Learnt...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 16:02:44 +0100</lastBuildDate>
    
	<atom:link href="https://til.codeinthehole.com/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    

    
    <item>
      <title>AWS ASGs have an &#39;instance refresh&#39; feature</title>
      <link>https://til.codeinthehole.com/posts/aws-asgs-have-an-instance-refresh-feature/</link>
      <pubDate>Mon, 28 Sep 2020 16:02:44 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/aws-asgs-have-an-instance-refresh-feature/</guid>
      <description>Which lets you replace all the instances in an auto-scaling group, possibly with a new AMI. See the announcement from the AWS Compute Blog.
If you use an immutable infrastructure approach and deploy using AMIs, this provides an alternative deployment mechanism. In contrast to using Terraform&amp;rsquo;s create_before_destroy mechanism, which creates a new auto-scaling group for each deploy, this method would allow a single long-lived ASG to be used.
Looks interesting.</description>
    </item>
    
    <item>
      <title>There&#39;s a Chrome extension for switching AWS IAM roles</title>
      <link>https://til.codeinthehole.com/posts/theres-a-chrome-extension-for-switching-aws-iam-roles/</link>
      <pubDate>Tue, 22 Sep 2020 22:12:13 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/theres-a-chrome-extension-for-switching-aws-iam-roles/</guid>
      <description>It&amp;rsquo;s the AWS Extend Switch Roles extension.
AWS&amp;rsquo;s Console only keeps your 5 most recent AWS accounts as quick links, which this extension gives doesn&amp;rsquo;t limit you.
This is useful if you&amp;rsquo;re using AWS Organizations and have lots of child AWS accounts that you need to assume roles into.</description>
    </item>
    
    <item>
      <title>AWS Availability Zones have counter-intuitive IDs</title>
      <link>https://til.codeinthehole.com/posts/aws-availability-zones-have-counterintuitive-ids/</link>
      <pubDate>Tue, 25 Aug 2020 22:18:32 +0100</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/aws-availability-zones-have-counterintuitive-ids/</guid>
      <description>Today, the AWS Service Health Dashboard referred to an Availability Zone in a way I wasn&amp;rsquo;t familiar with:
 3:52 AM PDT We are experiencing instance connectivity issues in a single Availability Zone (euw2-az2) in the EU-WEST-2 Region.
 See:
  Here &amp;ldquo;euw2-az2&amp;rdquo; is the &amp;ldquo;Zone ID&amp;rdquo; of the Availability Zone, and the mapping from Zone ID to the more familiar Zone Name is non-obvious. See, for example:
$ aws ec2 describe-availability-zones --region eu-west-2 | jq -r &amp;#39;.</description>
    </item>
    
    <item>
      <title>Where authentication for the `ubuntu` user on a EC2 instance is defined</title>
      <link>https://til.codeinthehole.com/posts/about-passwordless-users-in-ec2/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://til.codeinthehole.com/posts/about-passwordless-users-in-ec2/</guid>
      <description>The file that controls where the default ubuntu user on an Ubuntu EC2 instance is /etc/sudoers.d/90-cloud-init-users which has contents:
# User rules for ubuntu ubuntu ALL=(ALL) NOPASSWD:ALL def f(a: int) -&amp;gt; int: return None As you can see, the default ubuntu user has password-less, sudo access.
Source https://serverfault.com/questions/615034/disable-nopasswd-sudo-access-for-ubuntu-user-on-an-ec2-instance</description>
    </item>
    

  </channel>
</rss>
